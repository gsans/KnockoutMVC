@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

New Task <input type="text" value="Task Name" id="task" />
<button data-bind="click: $root.addTask">Add</button>
<button data-bind="click: $root.loadTasks">Load</button>

<h2>Tasks <span data-bind="text: totalTasks"></span></h2>
<table data-bind="visible: totalTasks()>0">
    <thead>
        <tr>
            <th>Done</th>
            <th>Task</th>
            <th>Due Date</th>    
            <th></th>           
        </tr>
    </thead>
    <tbody data-bind="foreach: tasks">
        <tr>
            <td data-bind="attr: {id:id}"><input type="checkbox" data-bind="attr: {checked: isDone}"/></td>
            <td data-bind="attr: {id:id}, text: name"></td>
            <td data-bind="attr: {id:id}, text: dueDate"></td>
            <td><a href="#" data-bind="attr: {id:id}, click: $root.removeTask">Remove</a></td>
        </tr>
    </tbody>
</table>
<span data-bind="visible: totalTasks()=='Empty'">No Tasks to show.</span>



    @section scripts
{
        @Scripts.Render("~/Scripts/knockout-3.1.0.js")
        @Scripts.Render("~/Scripts/moment.min.js")

        <script>
            function Task(name) {
                var self = this;
                self.id = 0;
                self.name = name;
                self.dueDate = new Date(); //moment().format('D/M/YYYY');
                self.isDone = false;
            }

            function Task2(item) {
                var self = this;
                self.id = item.Id;
                self.name = item.Name;
                self.dueDate = moment.utc(item.DueDate).format('D/M/YYYY');
                self.isDone = item.IsDone;
            }


            function AppViewModel() {
                var self = this;
                self.tasks = ko.observableArray(); /*[
                    { id: 1, name: "Task1", dueDate: "1/1/2014", isDone: true },
                    { id: 2, name: "Task2", dueDate: "1/1/2014", isDone: false }
                ]);*/

                self.totalTasks = ko.computed(function () {
                    return self.tasks().length > 0 ? self.tasks().length : 'Empty';
                }, this);

                self.loadTasks = function (task) {
                    $.get("api/Tasks", null, function (allData) {
                        var mappedTasks = $.map(allData, function (item) { return new Task2(item) });
                        self.tasks(mappedTasks);
                    });
                };

                self.addTask = function () {
                    var newTask = $('#task').val();
                    //self.tasks.push(new Task(newTask));
                    //$.ajax({ type: "POST", url: 'api/Tasks', data: new Task(newTask) });

                    $.ajax({
                        url: "api/Tasks",
                        type: "Post",
                        data: JSON.stringify(new Task(newTask)),
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                            self.loadTasks();
                        },
                        error: function () { alert('error'); }
                    });

                    /*$.get("api/Tasks/", null, function (allData) {
                        var mappedTasks = $.map(allData, function (item) { return new Task2(item) });
                        self.tasks(mappedTasks);
                    });*/
                };
                self.removeTask = function (task) {
                    self.tasks.remove(task);
                };
                
                self.loadTasks();
            }

            ko.applyBindings(new AppViewModel());
        </script>
    }
